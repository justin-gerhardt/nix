diff --git a/src/modules/bluetooth/bluez5-util.c b/src/modules/bluetooth/bluez5-util.c
index a21896ede..2f7a70ca4 100644
--- a/src/modules/bluetooth/bluez5-util.c
+++ b/src/modules/bluetooth/bluez5-util.c
@@ -321,6 +321,14 @@ void pa_bluetooth_transport_set_state(pa_bluetooth_transport *t, pa_bluetooth_tr
     }
 }
 
+void pa_bluetooth_transport_set_sink_volume(pa_bluetooth_transport *t,uint16_t volume) {
+
+    pa_assert(t);
+    t->sink_volume = volume;
+    pa_hook_fire(&t->device->discovery->hooks[PA_BLUETOOTH_HOOK_TRANSPORT_A2DP_SINK_VOLUME_CHANGED], t);
+
+}
+
 void pa_bluetooth_transport_put(pa_bluetooth_transport *t) {
     pa_assert(t);
 
@@ -428,6 +436,30 @@ static void bluez5_transport_release_cb(pa_bluetooth_transport *t) {
         pa_log_info("Transport %s released", t->path);
 }
 
+
+
+
+void  pa_bluetooth_set_bluez_dbus_volume(pa_bluetooth_transport *t, uint16_t vol) {
+    DBusMessage *m;
+    DBusMessageIter argIter, variantIter;
+    const char* interface = BLUEZ_MEDIA_TRANSPORT_INTERFACE;
+    const char* volProp = "Volume";
+
+    pa_assert(t);
+    pa_assert(t->device);
+    pa_assert(t->device->discovery);
+
+    pa_assert_se(m = dbus_message_new_method_call(t->owner, t->path,  "org.freedesktop.DBus.Properties", "Set"));
+    dbus_message_iter_init_append(m, &argIter);
+    dbus_message_iter_append_basic(&argIter, DBUS_TYPE_STRING, &interface);
+    dbus_message_iter_append_basic(&argIter, DBUS_TYPE_STRING, &volProp);
+    dbus_message_iter_open_container(&argIter, DBUS_TYPE_VARIANT, DBUS_TYPE_UINT16_AS_STRING, &variantIter);
+    dbus_message_iter_append_basic(&variantIter, DBUS_TYPE_UINT16, &vol);
+    dbus_message_iter_close_container(&argIter, &variantIter);
+    dbus_connection_send(pa_dbus_connection_get(t->device->discovery->connection), m, NULL);
+    dbus_message_unref(m);
+}
+
 bool pa_bluetooth_device_any_transport_connected(const pa_bluetooth_device *d) {
     unsigned i;
 
@@ -487,6 +519,14 @@ static void parse_transport_property(pa_bluetooth_transport *t, DBusMessageIter
 
             break;
         }
+        case DBUS_TYPE_UINT16: {
+            uint16_t uintValue;
+            dbus_message_iter_get_basic(&variant_i, &uintValue);
+            if (pa_streq(key, "Volume"))
+                pa_bluetooth_transport_set_sink_volume(t,uintValue);
+            break;
+        }
+
     }
 
     return;
diff --git a/src/modules/bluetooth/bluez5-util.h b/src/modules/bluetooth/bluez5-util.h
index ff172e025..639345390 100644
--- a/src/modules/bluetooth/bluez5-util.h
+++ b/src/modules/bluetooth/bluez5-util.h
@@ -51,6 +51,7 @@ typedef enum pa_bluetooth_hook {
     PA_BLUETOOTH_HOOK_TRANSPORT_STATE_CHANGED,            /* Call data: pa_bluetooth_transport */
     PA_BLUETOOTH_HOOK_TRANSPORT_MICROPHONE_GAIN_CHANGED,  /* Call data: pa_bluetooth_transport */
     PA_BLUETOOTH_HOOK_TRANSPORT_SPEAKER_GAIN_CHANGED,     /* Call data: pa_bluetooth_transport */
+    PA_BLUETOOTH_HOOK_TRANSPORT_A2DP_SINK_VOLUME_CHANGED, /* Call data: pa_bluetooth_transport */
     PA_BLUETOOTH_HOOK_MAX
 } pa_bluetooth_hook_t;
 
@@ -74,6 +75,7 @@ typedef void (*pa_bluetooth_transport_release_cb)(pa_bluetooth_transport *t);
 typedef void (*pa_bluetooth_transport_destroy_cb)(pa_bluetooth_transport *t);
 typedef void (*pa_bluetooth_transport_set_speaker_gain_cb)(pa_bluetooth_transport *t, uint16_t gain);
 typedef void (*pa_bluetooth_transport_set_microphone_gain_cb)(pa_bluetooth_transport *t, uint16_t gain);
+typedef void (*pa_bluetooth_transport_set_a2dp_sink_volume_cb)(pa_bluetooth_transport *t, uint16_t volume);
 
 struct pa_bluetooth_transport {
     pa_bluetooth_device *device;
@@ -90,6 +92,7 @@ struct pa_bluetooth_transport {
 
     uint16_t microphone_gain;
     uint16_t speaker_gain;
+    uint16_t sink_volume;
 
     pa_bluetooth_transport_state_t state;
 
@@ -98,6 +101,8 @@ struct pa_bluetooth_transport {
     pa_bluetooth_transport_destroy_cb destroy;
     pa_bluetooth_transport_set_speaker_gain_cb set_speaker_gain;
     pa_bluetooth_transport_set_microphone_gain_cb set_microphone_gain;
+    pa_bluetooth_transport_set_a2dp_sink_volume_cb set_sink_volume;
+
     void *userdata;
 };
 
@@ -157,6 +162,8 @@ pa_bluetooth_transport *pa_bluetooth_transport_new(pa_bluetooth_device *d, const
                                                    pa_bluetooth_profile_t p, const uint8_t *config, size_t size);
 
 void pa_bluetooth_transport_set_state(pa_bluetooth_transport *t, pa_bluetooth_transport_state_t state);
+void pa_bluetooth_set_bluez_dbus_volume(pa_bluetooth_transport *t, uint16_t vol);
+void pa_bluetooth_transport_set_sink_volume(pa_bluetooth_transport *t, uint16_t volume);
 void pa_bluetooth_transport_put(pa_bluetooth_transport *t);
 void pa_bluetooth_transport_unlink(pa_bluetooth_transport *t);
 void pa_bluetooth_transport_free(pa_bluetooth_transport *t);
diff --git a/src/modules/bluetooth/module-bluez5-device.c b/src/modules/bluetooth/module-bluez5-device.c
index 9da5d1ac3..f38004047 100644
--- a/src/modules/bluetooth/module-bluez5-device.c
+++ b/src/modules/bluetooth/module-bluez5-device.c
@@ -63,6 +63,7 @@ PA_MODULE_USAGE("path=<device object path>"
 #define FIXED_LATENCY_RECORD_SCO    (25 * PA_USEC_PER_MSEC)
 
 #define HSP_MAX_GAIN 15
+#define A2DP_MAX_VOLUME 127
 
 static const char* const valid_modargs[] = {
     "path",
@@ -100,6 +101,7 @@ struct userdata {
     pa_hook_slot *transport_state_changed_slot;
     pa_hook_slot *transport_speaker_gain_changed_slot;
     pa_hook_slot *transport_microphone_gain_changed_slot;
+    pa_hook_slot *transport_a2dp_sink_volume_changed_slot;
 
     pa_bluetooth_discovery *discovery;
     pa_bluetooth_device *device;
@@ -1177,6 +1179,27 @@ static void sink_set_volume_cb(pa_sink *s) {
     u->transport->set_speaker_gain(u->transport, gain);
 }
 
+
+
+/* Run from main thread */
+static void a2dp_sink_set_volume_cb(pa_sink *s) {
+    uint16_t vol;
+    struct userdata *u;
+
+    pa_assert(s);
+    u = s->userdata;
+
+    pa_assert(u);
+    pa_assert(u->sink == s);
+
+    vol = (pa_cvolume_max(&s->real_volume) * A2DP_MAX_VOLUME) / PA_VOLUME_NORM;
+    if (vol > A2DP_MAX_VOLUME)
+        vol = A2DP_MAX_VOLUME;
+
+    pa_bluetooth_set_bluez_dbus_volume( u->transport, vol);
+
+   
+}
 /* Run from main thread */
 static int add_sink(struct userdata *u) {
     pa_sink_new_data data;
@@ -1232,6 +1255,11 @@ static int add_sink(struct userdata *u) {
         pa_sink_set_set_volume_callback(u->sink, sink_set_volume_cb);
         u->sink->n_volume_steps = 16;
     }
+
+
+    if (u->profile == PA_BLUETOOTH_PROFILE_A2DP_SINK) {
+        pa_sink_set_set_volume_callback(u->sink, a2dp_sink_set_volume_cb);
+    }
     return 0;
 }
 
@@ -2117,6 +2145,13 @@ static void handle_transport_state_change(struct userdata *u, struct pa_bluetoot
             /* Same comment as above */
             if (PA_SINK_IS_OPENED(u->sink->state))
                 pa_asyncmsgq_send(u->sink->asyncmsgq, PA_MSGOBJECT(u->sink), PA_SINK_MESSAGE_SETUP_STREAM, NULL, 0, NULL);
+            
+
+            uint16_t volume = (pa_cvolume_max(&(u->sink->real_volume)) * A2DP_MAX_VOLUME) / PA_VOLUME_NORM;
+
+            if (volume > A2DP_MAX_VOLUME)
+                volume = A2DP_MAX_VOLUME;
+            pa_bluetooth_set_bluez_dbus_volume( t, volume);
 
             /* FIXME: See the previous comment. */
             pa_sink_suspend(u->sink, false, PA_SUSPEND_IDLE|PA_SUSPEND_USER);
@@ -2178,8 +2213,8 @@ static pa_hook_result_t transport_speaker_gain_changed_cb(pa_bluetooth_discovery
     pa_assert(t);
     pa_assert(u);
 
-    if (t != u->transport)
-      return PA_HOOK_OK;
+    // if (t != u->transport)
+    //   return PA_HOOK_OK;
 
     gain = t->speaker_gain;
     volume = (pa_volume_t) (gain * PA_VOLUME_NORM / HSP_MAX_GAIN);
@@ -2225,6 +2260,33 @@ static pa_hook_result_t transport_microphone_gain_changed_cb(pa_bluetooth_discov
     return PA_HOOK_OK;
 }
 
+static pa_hook_result_t transport_a2dp_sink_volume_changed_cb(pa_bluetooth_discovery *y, pa_bluetooth_transport *t, struct userdata *u) {
+    pa_volume_t volume;
+    pa_cvolume v;
+
+    pa_assert(t);
+    pa_assert(u);
+
+    if (t != u->transport)
+      return PA_HOOK_OK;
+
+    volume = (pa_volume_t) (t->sink_volume * PA_VOLUME_NORM / A2DP_MAX_VOLUME);
+
+    /* increment volume by one to correct rounding errors */
+    if (volume < PA_VOLUME_NORM)
+        volume++;
+
+    pa_cvolume_set(&v, u->encoder_sample_spec.channels, volume);
+    if (t->profile == PA_BLUETOOTH_PROFILE_HEADSET_HEAD_UNIT)
+        pa_sink_volume_changed(u->sink, &v);
+    else
+        pa_sink_set_volume(u->sink, &v, true, true);
+    // pa_source_set_volume(u->source, &v, true, true);
+    // pa_source_volume_changed(u->source, &v);
+    return PA_HOOK_OK;
+}
+
+
 /* Run from main thread context */
 static int device_process_msg(pa_msgobject *obj, int code, void *data, int64_t offset, pa_memchunk *chunk) {
     struct bluetooth_msg *m = BLUETOOTH_MSG(obj);
@@ -2315,6 +2377,9 @@ int pa__init(pa_module* m) {
     u->transport_microphone_gain_changed_slot =
         pa_hook_connect(pa_bluetooth_discovery_hook(u->discovery, PA_BLUETOOTH_HOOK_TRANSPORT_MICROPHONE_GAIN_CHANGED), PA_HOOK_NORMAL, (pa_hook_cb_t) transport_microphone_gain_changed_cb, u);
 
+    u->transport_a2dp_sink_volume_changed_slot =
+        pa_hook_connect(pa_bluetooth_discovery_hook(u->discovery, PA_BLUETOOTH_HOOK_TRANSPORT_A2DP_SINK_VOLUME_CHANGED), PA_HOOK_NORMAL, (pa_hook_cb_t) transport_a2dp_sink_volume_changed_cb, u);
+
     if (add_card(u) < 0)
         goto fail;
 
@@ -2376,6 +2441,9 @@ void pa__done(pa_module *m) {
     if (u->transport_microphone_gain_changed_slot)
         pa_hook_slot_free(u->transport_microphone_gain_changed_slot);
 
+    if (u->transport_a2dp_sink_volume_changed_slot)
+        pa_hook_slot_free(u->transport_a2dp_sink_volume_changed_slot);
+
     if (u->encoder_buffer)
         pa_xfree(u->encoder_buffer);
 
